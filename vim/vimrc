set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

"Plug 'cschlueter/vim-wombat'
"Plug 'fholgado/minibufexpl.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'rstacruz/sparkup'
Plug 'StanAngeloff/php.vim', { 'for': 'php' }
Plug 'groenewege/vim-less'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'sukima/xmledit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }
Plug 'w0rp/ale'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'morhetz/gruvbox'
" jsx
Plug 'pangloss/vim-javascript', {'for': ['javascript', 'javascript.jsx']}
Plug 'mxw/vim-jsx'


call plug#end()

" ale
let g:ale_linters = {
\    'javascript': ['eslint'],
\    'javascript.jsx': ['eslint'],
\    'python': ['flake8'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'remove_trailing_lines', 'trim_whitespace'],
\   'javascript.jsx': ['prettier', 'remove_trailing_lines', 'trim_whitespace'],
\   'scss': ['prettier', 'remove_trailing_lines', 'trim_whitespace'],
\   'css': ['prettier', 'remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black', 'remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_fix_on_save = 1
let g:ale_linter_aliases = {'javascript.jsx': 'javascript'}
let g:ale_change_sign_column_color = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
let g:ale_javascript_eslint_executable = '/home/karloskar/.yarn/bin/eslint'
let g:ale_javascript_eslint_options = '-c /home/karloskar/.eslintrc.js'
let g:ale_javascript_eslint_use_global = 1
hi! link SignColumn LineNr
hi! link ALESignColumnWithErrors DiffDelete
hi! link ALESignColumnWithoutErrors LineNr
" Ale/Python
let g:ale_python_black_executable = '/home/karloskar/.local/bin/black'
let g:ale_python_black_options = '-l 100'

" NERDTree
nmap <silent> <F3> :NERDTreeToggle<CR>

" set leader
let mapleader = ","

" minibufexpl
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
nnoremap <C-PageUp> :bprevious!<CR>
nnoremap <C-PageDown> :bnext!<CR>

" vim-sparkup double quotes
let g:sparkupDoubleQuote = 1

syntax on
filetype plugin indent on

set cursorline
set number
set ruler
set title
set nowrap
set nobackup
set showcmd
set scrolloff=3

set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

set showmatch
set incsearch
set hlsearch

set visualbell t_vb=
set novisualbell
set autoindent
if exists('+colorcolumn')
    set colorcolumn=100
endif

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.*/

" folding
set foldmethod=indent
set foldnestmax=1
set foldenable
set foldlevel=4

" For airline
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
let g:airline_theme = "gruvbox"
set laststatus=2
set encoding=utf-8
" N / I instead of NORMAL / INSERT
let g:airline_mode_map = {
      \ '__' : '--',
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'REPLACE',
      \ 'c' : 'COMMAND',
      \ 'v' : 'VISUAL',
      \ 'V' : 'V-LINE',
      \ '^V' : 'V-BLOCK',
      \ 's' : 'SELECT',
      \ 'S' : 'S-LINE',
      \ '^S' : 'S-BLOCK',
\ }

augroup vimrcs
    au!
    au bufwritepost ~/.vimrc
    \ source ~/.vimrc |
    \ if exists('g:Powerline_loaded') |
    \ silent! call Pl#Load() |
    \ endif
augroup END

set backspace=eol,indent,start


" gruvbox specific
let g:gruvbox_italic=1
let g:gruvbox_italicize_strings=1
let g:gruvbox_contrast_dark='hard'
" needed for gruvbox
set bg=dark

" Window size
if has("gui_running")
    " GUI is running or is about to start.
    " Set size.
    set lines=50 columns=160
    set linespace=-1
    set gfn=Fira\ Mono\ for\ Powerline\ 11
    colorscheme gruvbox
    " hide right scrollbar and toolbar
    set go-=r
    set go-=T
else
    " This is console Vim.
    set t_Co=256
    colorscheme gruvbox
    set timeoutlen=100
endif
if $TERM =~ '^screen-256color'
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
    map <Esc>[5;5~ <C-PageUp>
    map! <Esc>[5;5~ <C-PageUp>
    map <Esc>[6;5~ <C-PageDown>
    map! <Esc>[6;5~ <C-PageDown>
endif

" Better pasting in terminal vim from
" http://userobsessed.net/tips-and-tricks/2011/05/10/copy-and-paste-in-vim/
imap <Leader>v  <C-O>:set paste<CR><C-r>*<C-O>:set nopaste<CR>

" Remember foldings and cursor position
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview

set wildignore=.git,*/node_modules/*,*.pyc,*.png,*.jpg,venv/*
" fzf.vim
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
\ }
nnoremap <silent> <C-t> :FZF<CR>
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

" close buffer
nnoremap <leader>c :bp\|:bd #<CR>

" filetype specific settings
autocmd Filetype yaml setlocal et ts=2 sw=2 sts=2

autocmd FileType javascript setlocal et ts=2 sw=2 sts=2
autocmd FileType scss setlocal et ts=2 sw=2 sts=2

" JSX
let g:jsx_ext_required=0
let g:javascript_enable_domhtmlcss=1

" Let webpack know we've saved a file
set backupcopy=yes
